import { PLATFORM, PUBLISHABLE_PLATFORMS, UserDetailsBase } from './types';

/**
 * Platform posts as stored in our DB. A platform post can be in one of these statuses
 * - 'draft': The post has an `id`, a `platformId` value, and a `draft` value.
 * - 'posted': The post has been published on the platform and has a defined `postedStatus`.
 * - 'fetched': The post was fetched from the platform, has a defined `postedStatus`
 * */

/**
 * A PlatformPost is on object that was already stored on our DB
 * */
export interface PlatformPost<C = any, D = any> {
  id: string; // Internal id generated by firestore
  platformId: PUBLISHABLE_PLATFORMS;
  user_id: string; // The user_id of the author in the publishing platform
  status: 'draft' | 'posted' | 'fetched';
  postedStatus?: PlatformPostPosted<C>;
  draftStatus?: PlatformPostDraft<D>;
}

/**
 * The PlatformPostPosted status is defined after a PlatformPost
 * has been published to its platform
 */
export interface PlatformPostPosted<C = any> {
  timestampMs: number; // timestamp in ms
  user_id: string;
  post_id: string; // The id of the post on the platform
  post: C;
}

/**
 * The PlatformPostDraft status is defined prior to posting a PlatformPost
 */
export interface PlatformPostDraft<D = any> {
  postApproval: 'pending' | 'approved';
  draft: D;
}

/**
 * The PlatformPostPublish object is used to publish a post on a platform
 * */
export interface PlatformPostPublish<D = any> {
  id: string; // internal postId of which this post is a mirror
  draft: D;
}

/**
 * A published post is like a fetched post except it must also include
 * the original id
 * */
export interface PlatformPostPublished<C = any> {
  id: string;
  postStatus: PlatformPostPosted<C>;
}

export interface PlatformPostPublishWithCrendentials {
  platformPost: PlatformPostPublish;
  userDetails: UserDetailsBase;
}

export type PerPlatformPublish = Map<
  PLATFORM,
  PlatformPostPublishWithCrendentials[]
>;
